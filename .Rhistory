ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # передать датафрейм в ggplot
geom_point(size = 2)+                                    # добавить точки
geom_label_repel(                                        # добавить метки точек
mapping = aes(
label = stringr::str_glue(
"{hospital}\n{n_cases} cases, {delay_mean} days")  # как отображаются метки
),
size = 3,                                              # размер текста в метках
min.segment.length = 0)+                               # показать все сегменты линии
labs(                                                    # добавить метки осей
title = "Mean delay to admission, by hospital",
x = "Number of cases",
y = "Mean delay (days)")
ggplot()+
# Все точки выделены серым цветом
geom_point(
data = linelist,                                   # все данные, представленные в этом слое
mapping = aes(x = ht_cm, y = wt_kg),
color = "grey",
alpha = 0.5)+                                              # серый и полупрозрачный
# Few points in black
geom_point(
data = linelist %>% filter(days_onset_hosp > 15),  # фильтрованные данные, поступающие в этот слой
mapping = aes(x = ht_cm, y = wt_kg),
alpha = 1)+                                                # по умолчанию черный и не прозрачный
# point labels for few points
geom_label_repel(
data = linelist %>% filter(days_onset_hosp > 15),  # отфильтровать данные для меток
mapping = aes(
x = ht_cm,
y = wt_kg,
fill = outcome,                                          # обозначение цвета метками в зависимости от исхода
label = stringr::str_glue("Delay: {days_onset_hosp}d")), # метка, созданная с помощью функции str_glue()
min.segment.length = 0) +                                  # показать сегменты линий для всех
# убрать букву "a" из внутренних полей легенды
guides(fill = guide_legend(override.aes = aes(color = NA)))+
# метки осей
labs(
title = "Cases with long delay to admission",
y = "weight (kg)",
x = "height(cm)")
# построить эпидемическую кривую по дате начала заболевания, если это возможно
ggplot(linelist, aes(x = date_onset)) +
geom_histogram(binwidth = 7) +
scale_x_date(
# 1 разрыв каждый 1 месяц
date_breaks = "1 months",
# На метках должен отображаться месяц, а затем дата
date_labels = "%b %d"
) +
theme_classic()
ggplot(linelist, aes(x = date_onset)) +
geom_histogram(binwidth = 7) +
scale_x_date(
labels = scales::label_date_short()  # автоматически эффективные метки даты
)+
theme_classic()
# загрузка gghighlight
library(gghighlight)
# заменить значения NA на неизвестные в переменной исхода
linelist <- linelist %>%
mutate(outcome = replace_na(outcome, "Unknown"))
# построить гистограмму всех случаев по возрасту
ggplot(
data = linelist,
mapping = aes(x = age_years, fill = outcome)) +
geom_histogram() +
gghighlight::gghighlight(outcome == "Death")     # выделить случаи, когда пациент умер
# построить гистограмму всех случаев по возрасту
linelist %>%
count(week = lubridate::floor_date(date_hospitalisation, "week"),
hospital) %>%
ggplot()+
geom_line(aes(x = week, y = n, color = hospital))+
theme_minimal()+
gghighlight::gghighlight() +                      # выделить случаи, когда пациент умер
facet_wrap(~hospital)                              # создавать фасеты по исходам
pacman::p_load(
tidyverse,      # работа с данными и их визуализация
cowplot,        # объединение графиков
patchwork       # объединение графиков
)
malaria_data <- rio::import(here::here("data", "malaria_facility_count_data.rds"))
# столбчатая диаграмма общего количества случаев по районам
p1 <- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +
geom_bar(stat = "identity") +
labs(
x = "District",
y = "Total number of cases",
title = "Total malaria cases by district"
) +
theme_minimal()
# эпидемическая кривая во времени
p2 <- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +
geom_col(width = 1) +
labs(
x = "Date of data submission",
y =  "number of cases"
) +
theme_minimal()
cowplot::plot_grid(p1, p2,
# 1 столбец и две строки - уложенные друг на друга
ncol = 1,
nrow = 2,
# верхний график на 2/3 выше второго
rel_heights = c(2, 3))
p1 <- linelist %>%
mutate(hospital = recode(hospital, "St. Mark's Maternity Hospital (SMMH)" = "St. Marks")) %>%
count(hospital, outcome) %>%
ggplot()+
geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+
scale_fill_brewer(type = "qual", palette = 4, na.value = "grey")+
coord_flip()+
theme_minimal()+
labs(title = "Cases by outcome")
p2 <- linelist %>%
mutate(hospital = recode(hospital, "St. Mark's Maternity Hospital (SMMH)" = "St. Marks")) %>%
count(hospital, age_cat) %>%
ggplot()+
geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+
scale_fill_brewer(type = "qual", palette = 1, na.value = "grey")+
coord_flip()+
theme_minimal()+
theme(axis.text.y = element_blank())+
labs(title = "Cases by age")
cowplot::plot_grid(p1, p2, rel_widths = c(0.3))
# Определить график 1 без легенды
p1 <- linelist %>%
mutate(hospital = recode(hospital, "St. Mark's Maternity Hospital (SMMH)" = "St. Marks")) %>%
count(hospital, outcome) %>%
ggplot()+
geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+
scale_fill_brewer(type = "qual", palette = 4, na.value = "grey")+
coord_flip()+
theme_minimal()+
theme(legend.position = "none")+
labs(title = "Cases by outcome")
# Определить график 2 без легенды
p2 <- linelist %>%
mutate(hospital = recode(hospital, "St. Mark's Maternity Hospital (SMMH)" = "St. Marks")) %>%
count(hospital, age_cat) %>%
ggplot()+
geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+
scale_fill_brewer(type = "qual", palette = 1, na.value = "grey")+
coord_flip()+
theme_minimal()+
theme(
legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank()
)+
labs(title = "Cases by age")
# извлечение легенды из гр1 (из гр1 + легенда)
leg_p1 <- cowplot::get_legend(p1 +
theme(legend.position = "right",        # извлечение вертикальной легенды
legend.justification = c(0,0.5))+ # легенды должны быть выровнены
labs(fill = "Outcome"))                 # заголовок легенды
# извлечение легенды из гр2 (из гр2 + легенда)
leg_p2 <- cowplot::get_legend(p2 +
theme(legend.position = "right",         # извлечение вертикальной легенды
legend.justification = c(0,0.5))+  # легенды должны быть выровнены
labs(fill = "Age Category"))             # заголовок легенды
# создание пустого графика для выравнивания легенды
#blank_p <- patchwork::plot_spacer() + theme_void()
# создание панелей легенд, которые могут располагаться одна на другой (или использовать разделитель, о котором говорилось выше)
legends <- cowplot::plot_grid(leg_p1, leg_p2, nrow = 2, rel_heights = c(.3, .7))
# объединение двух графиков и панели объединенных легенд
combined <- cowplot::plot_grid(p1, p2, legends, ncol = 3, rel_widths = c(.4, .4, .2))
combined  # печать
# Определить основной график
main_plot <- ggplot(data = linelist)+
geom_histogram(aes(x = date_onset, fill = hospital))+
scale_fill_brewer(type = "qual", palette = 1, na.value = "grey")+
theme_half_open()+
theme(legend.position = "bottom")+
labs(title = "Epidemic curve and outcomes by hospital")
# Определить вставной график
inset_plot <- linelist %>%
mutate(hospital = recode(hospital, "St. Mark's Maternity Hospital (SMMH)" = "St. Marks")) %>%
count(hospital, outcome) %>%
ggplot()+
geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+
scale_fill_brewer(type = "qual", palette = 4, na.value = "grey")+
coord_flip()+
theme_minimal()+
theme(legend.position = "none",
axis.title.y = element_blank())+
labs(title = "Cases by outcome")
# Объединить основной график и вставной
cowplot::ggdraw(main_plot)+
draw_plot(inset_plot,
x = .6, y = .55,    #x = .07, y = .65,
width = .4, height = .4)
pacman::p_load(cowplot)            # загрузка/установка cowplot
p1 <- linelist %>%                 # сохранить график как объект
count(
epiweek = lubridate::floor_date(date_onset, "week")) %>%
ggplot()+
geom_area(aes(x = epiweek, y = n), fill = "grey")+
scale_x_date(
date_breaks = "month",
date_labels = "%b")+
theme_cowplot()+
labs(
y = "Weekly cases"
)
p1                                      # просмотр графика
p2 <- linelist %>%         # сохранить график как объект
group_by(
epiweek = lubridate::floor_date(date_onset, "week")) %>%
summarise(
n = n(),
pct_death = 100*sum(outcome == "Death", na.rm=T) / n) %>%
ggplot(aes(x = epiweek, y = pct_death))+
geom_line()+
scale_x_date(
date_breaks = "month",
date_labels = "%b")+
scale_y_continuous(
position = "right")+
theme_cowplot()+
labs(
x = "Epiweek of symptom onset",
y = "Weekly percent of deaths",
title = "Weekly case incidence and percent deaths"
)
p2     # просмотр графика
aligned_plots <- cowplot::align_plots(p1, p2, align="hv", axis="tblr")         # выровнять два графика и сохранить их в виде списка
aligned_plotted <- ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])  # наложить их друг на друга и сохранить визуальный график
aligned_plotted                                                                # печать наложенных друг на друга графиков
pacman::p_load(
tidyverse,      # includes ggplot2 and other
rio,            # import/export
here,           # file locator
stringr,        # working with characters
scales,         # transform numbers
ggrepel,        # smartly-placed labels
gghighlight,    # highlight one part of plot
RColorBrewer    # color scales
)
pacman::p_load(
tidyverse, # включает в себя ggplot2 и другие
rio, # импорт/экспорт
here, # локатор файлов
stringr, # работа с символами
scales, # преобразование чисел
ggrepel, # грамотно расставленные метки
gghighlight, # выделение одной части графика
RColorBrewer, # цветовые шкалы
)
pacman::p_load(
tidyverse, # включает в себя ggplot2 и другие
rio, # импорт/экспорт
here, # локатор файлов
stringr, # работа с символами
scales, # преобразование чисел
ggrepel, # грамотно расставленные метки
gghighlight, # выделение одной части графика
RColorBrewer # цветовые шкалы
)
babelquarto::render_book()
babelquarto::render_book()
# Translate chapter page
chapter_list = c("editorial_style.qmd", "data_used.qmd", "basics.qmd", "transition_to_R.qmd", "packages_suggested.qmd", "r_projects.qmd", "importing.qmd", #"cleaning.qmd",
"dates.qmd", #"characters_strings.qmd",
"factors.qmd", "pivoting.qmd", "grouping.qmd", "joining_matching.qmd", "deduplication.qmd", "iteration.qmd", "tables_descriptive.qmd", "stat_tests.qmd", "regression.qmd", "missing_data.qmd",
"standardization.qmd", "moving_average.qmd", "time_series.qmd", "epidemic_models.qmd", "contact_tracing.qmd", "survey_analysis.qmd", "survival_analysis.qmd", "gis.qmd", "tables_presentation.qmd", "ggplot_basics.qmd", "ggplot_tips.qmd", "epicurves.qmd", "age_pyramid.qmd", "heatmaps.qmd", "diagrams.qmd", "combination_analysis.qmd", "transmission_chains.qmd", "phylogenetic_trees.qmd", "interactive_plots.qmd", "rmarkdown.qmd", "reportfactory.qmd", "flexdashboard.qmd", "shiny_basics.qmd", "writing_functions.qmd", "directories.qmd", "collaboration.qmd", "errors.qmd", "help.qmd", "network_drives.qmd", "data_table.qmd")
chapter_list
as_data_frame(chapter_list)
print(as_data_frame(chapter_list), n = 100)
# Translate chapter page
chapter_list = c("editorial_style.qmd", "data_used.qmd", "basics.qmd", "transition_to_R.qmd", "packages_suggested.qmd", "r_projects.qmd", "importing.qmd", "cleaning.qmd",
"dates.qmd", "characters_strings.qmd",
"factors.qmd", "pivoting.qmd", "grouping.qmd", "joining_matching.qmd", "deduplication.qmd", "iteration.qmd", "tables_descriptive.qmd", "stat_tests.qmd", "regression.qmd", "missing_data.qmd",
"standardization.qmd", "moving_average.qmd", "time_series.qmd", "epidemic_models.qmd", "contact_tracing.qmd", "survey_analysis.qmd", "survival_analysis.qmd", "gis.qmd", "tables_presentation.qmd", "ggplot_basics.qmd", "ggplot_tips.qmd", "epicurves.qmd", "age_pyramid.qmd", "heatmaps.qmd", "diagrams.qmd", "combination_analysis.qmd", "transmission_chains.qmd", "phylogenetic_trees.qmd", "interactive_plots.qmd", "rmarkdown.qmd", "reportfactory.qmd", "flexdashboard.qmd", "shiny_basics.qmd", "writing_functions.qmd", "directories.qmd", "collaboration.qmd", "errors.qmd", "help.qmd", "network_drives.qmd", "data_table.qmd")
print(as_data_frame(chapter_list), n = 100)
chapter_list
babelquarto::render_book()
chapter_list
chapter_list
babelquarto::render_book()
babelquarto::render_book()
babelquarto::render_book()
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=I(Belgium))+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=I(Belgium))+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
babelquarto::render_book()
babelquarto::render_book()
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=I(Belgium))+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
View(sample_data)
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=I(Belgium))+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=Belgium)+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=I("Belgium"))+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=I(Belgium))+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=Belgium)+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=Belgium)+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
tree
sample_data <- import(here("data", "phylo", "sample_data_Shigella_tree.csv"))
DT::datatable(head(sample_data,50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
head(tree$tip.label)
colnames(sample_data)
head(sample_data$Sample_ID) # we again inspect only the first 6 using head()
sample_data$Sample_ID[!tree$tip.label %in% sample_data$Sample_ID]
ggtree(tree)                                            # simple linear tree
ggtree(tree,  branch.length = "none")                   # simple linear tree with all tips aligned
ggtree(tree, layout="circular")                         # simple circular tree
ggtree(tree, layout="circular", branch.length = "none") # simple circular tree with all tips aligned
ggtree(tree, layout = "circular", branch.length = 'none') %<+% sample_data + # %<+% adds dataframe with sample data to tree
aes(color = I(Belgium))+                       # color the branches according to a variable in your dataframe
scale_color_manual(
name = "Sample Origin",                      # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"),                     # the different options in your variable
labels = c("NRCSS Belgium", "Other"),        # how you want the different options named in your legend, allows for formatting
values = c("blue", "black"),                  # the color you want to assign to the variable
na.value = "black") +                        # color NA values in black as well
new_scale_color()+                             # allows to add an additional color scheme for another variable
geom_tippoint(
mapping = aes(color = Continent),          # tip color by continent. You may change shape adding "shape = "
size = 1.5)+                               # define the size of the point at the tip
scale_color_brewer(
name = "Continent",                    # name of your color scheme (will show up in the legend like this)
palette = "Set1",                      # we choose a set of colors coming with the brewer package
na.value = "grey") +                    # for the NA values we choose the color grey
geom_tiplab(                             # adds name of sample to tip of its branch
color = 'black',                       # (add as many text lines as you wish with + , but you may need to adjust offset value to place them next to each other)
offset = 1,
size = 1,
geom = "text",
align = TRUE)+
ggtitle("Phylogenetic tree of Shigella sonnei")+       # title of your graph
theme(
axis.title.x = element_blank(), # removes x-axis title
axis.title.y = element_blank(), # removes y-axis title
legend.title = element_text(    # defines font size and format of the legend title
face = "bold",
size = 12),
legend.text=element_text(       # defines font size and format of the legend text
face = "bold",
size = 10),
plot.title = element_text(      # defines font size and format of the plot title
size = 12,
face = "bold"),
legend.position = "bottom",     # defines placement of the legend
legend.box = "vertical",        # defines placement of the legend
legend.margin = margin())
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=Belgium)+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
tree <- ape::read.tree(here::here("data", "phylo", "Shigella_tree.txt"))
sample_data <- read.csv(here::here("data","phylo", "sample_data_Shigella_tree.csv"),sep=",", na.strings=c("NA"), head = TRUE, stringsAsFactors=F)
ggtree(tree, layout="circular", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree
aes(color=Belgium)+ # color the branches according to a variable in your dataframe
scale_color_manual(name = "Sample Origin", # name of your color scheme (will show up in the legend like this)
breaks = c("Yes", "No"), # the different options in your variable
labels = c("NRCSS Belgium", "Other"), # how you want the different options named in your legend, allows for formatting
values= c("blue", "black"), # the color you want to assign to the variable
na.value = "black") + # color NA values in black as well
new_scale_color()+ # allows to add an additional color scheme for another variable
geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding "shape = "
scale_color_brewer(name = "Continent",  # name of your color scheme (will show up in the legend like this)
palette="Set1", # we choose a set of colors coming with the brewer package
na.value="grey")+ # for the NA values we choose the color grey
theme(legend.position= "bottom")
pacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale, tidytree)
