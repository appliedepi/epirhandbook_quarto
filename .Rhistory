width = 0.1,
color="black",
colnames = FALSE)+
scale_fill_manual(name = "Gender",
values = c("#00d1b1", "purple"),
breaks = c("Male", "Female"),
labels = c("Male", "Female"))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())
h1
h2 <- h1 + new_scale_fill()
h3 <- gheatmap(h2, cipR,
offset = 0.004,
width = 0.1,
color = "black",
colnames = FALSE)+
scale_fill_manual(name = "Ciprofloxacin resistance \n conferring mutation",
values = c("#fe9698","#ea0c92"),
breaks = c( "gyrA D87Y", "gyrA S83L"),
labels = c( "gyrA d87y", "gyrA s83l"))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())+
guides(fill = guide_legend(nrow = 2,byrow = TRUE))
h3
h4 <- h3 + new_scale_fill()
h5 <- gheatmap(h4, MIC_Cip,
offset = 0.005,
width = 0.1,
color = "black",
colnames = FALSE)+
scale_fill_continuous(name = "MIC for Ciprofloxacin",
low = "yellow", high = "red",
breaks = c(0,0.50,1.00),
na.value = "white")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
h5
babelquarto::render_book()
babelquarto::render_book()
pacman::p_load(
git2r,
stringr,
babeldown,
here
)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Create functions to detect changes in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
repo <- repository(here())
diffs <- diff(repo)
# Check if diffs is a list of diff objects and extract filenames accordingly
if (is.list(diffs)) {
changed_files <- sapply(diffs, function(d) d@filename)
} else {
# Handle other cases if diffs is not a list of diff objects
changed_files <- diffs@filename
}
# Filter only .qmd files
changed_chapters <- changed_files[str_detect(changed_files, "\\.qmd$")]
return(changed_chapters)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
repo <- repository(here())
repo
diffs <- diff(repo)
if (is.list(diffs)) {
changed_files <- sapply(diffs, function(d) d@filename)
} else {
# Handle other cases if diffs is not a list of diff objects
changed_files <- diffs@filename
}
View(diffs)
View(diffs)
View(diffs)
diffs
diffs$files
repo <- repository(here("new_pages"))
diffs <- diff(repo)
repo
?repository()
here("new_pages")
repo1 <- repository(path = "D:/Book Writing/epihandbook_quarto/new_pages")
repo1
repo <- repository()
repo
summary(diffs)
a <- summary(diffs)
a
summary(diffs) -> a
cat(diff(repo, as_char=TRUE))
summary(diffs)
diffs$old
diffs$files
diffs$files$ole_files
diffs$files$old_files
diffs$files$old_file
str(diffs)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Create functions to detect changes in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
repo <- repository(here())
diffs <- diff(repo)
changed_files <- sapply(diffs, function(d) d$new_file)  # Extract new_file from each diff
changed_chapters <- changed_files[str_detect(changed_files, "\\.qmd$")]
return(changed_chapters)
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Create functions to detect changes in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
repo <- repository(here())
diffs <- diff(repo)
# Print structure to understand what we're working with
print(str(diffs))
print(class(diffs))
# Assuming diffs is a list and we need to extract 'new_file' from each
changed_files <- lapply(diffs, function(d) d$new_file)  # Changed from sapply to lapply for clarity
# Unlist the result as lapply returns a list of character vectors
changed_files <- unlist(changed_files)
# Filter only .qmd files
changed_chapters <- changed_files[str_detect(changed_files, "\\.qmd$")]
return(changed_chapters)
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
print(str(diffs))
print(class(diffs))
pacman::p_load(
gert,
stringr,
babeldown,
here
)
diffs <- gert::git_diff(repo)
log <- gert::git_log(repo = repo)
log <- gert::git_log(repo = here())
log <- gert::git_log(repo = repo)
View(log)
gert::git_diff()
diffs <- gert::git_diff()
View(diffs)
diffs %>% str_detect(new, "\\.qmd$")
str_detect(diffs$new, "\\.qmd$")
diffs <- gert::git_diff()
# Filter only .qmd files
changed_chapters <-  str_detect(diffs$new, "\\.qmd$")
changed_chapters
View(diffs)
diffs %>%
filter(str_detect(new, ".qmd$")) %>%
pull(file)
diffs %>%
filter(str_detect(new, ".qmd$"))
diffs %>%
filter(str_detect(new, "\\.qmd$"))
diffs %>%
filter(str_detect(diffs$new, "\\.qmd$"))
View(diffs)
str_detect(diffs$new, "\\.qmd$")
diffs$new
View(diffs)
diffs %>%
filter(str_detect(diffs$new, "\\.qmd$")) %>%
pull(file)
diffs %>%
filter(str_detect(diffs$new, "\\.qmd$"))
diffs %>%
filter(str_detect(string = new, pattern = "\\.qmd$"))
diffs %>%
filter(str_detect(string = status, pattern = "\\.qmd$"))
class(diffs)
diffs %>%
filter(str_detect(string = new, pattern = "\\.qmd$"))
diffs %>%
filter(str_detect(string = status, pattern = ".qmd"))
str_detect(diffs$new, "\\.qmd$")
diffs %>%
filter(stringr::str_detect(string = status, pattern = "\\.qmd$"))
diffs$new[str_detect(diffs$new, "\\.qmd$")]
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")
]
changed_files
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
target_lang = c("FR", "ES", "JA", "PT-PT", "TR", "RU", "VN")
chapters_changed_update <- generate_translation_files(chapters_changed, target_lang)
chapters_changed_update
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
chapters_changed
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
chapters_changed
chapters_changed <- get_changed_chapters()
target_lang = c("FR", "ES", "JA", "PT-PT", "TR", "RU", "VN")
chapters_changed_update <- generate_translation_files(chapters_changed, target_lang)
chapters_changed_update
result <- list()
# Loop over each language and append it to each chapter file name
for (lang in file_language) {
# Append the language suffix before the ".qmd" extension
modified_chapters <- sapply(chapters_changed, function(chapter) {
sub("\\.qmd$", paste0("_", lang, ".qmd"), chapter)
})
# Add the modified chapters to the result list
result[[lang]] <- modified_chapters
}
file_language = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
result <- list()
# Loop over each language and append it to each chapter file name
for (lang in file_language) {
# Append the language suffix before the ".qmd" extension
modified_chapters <- sapply(chapters_changed, function(chapter) {
sub("\\.qmd$", paste0("_", lang, ".qmd"), chapter)
})
# Add the modified chapters to the result list
result[[lang]] <- modified_chapters
}
result
# Flatten the list into a single vector
chapters_changed_update <- unlist(result)
chapters_changed_update
class(chapters_changed_update)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
chapters_changed <- get_changed_chapters()
file_language = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
all_chapters_with_language <- lapply(file_language, function(lang) {
sapply(chapters_changed, function(chapter) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})
})
View(all_chapters_with_language)
# Unlist to convert the list of vectors into a single vector
final_vector <- unlist(all_chapters_with_language)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
chapters_changed <- get_changed_chapters()
file_language = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
result <- setNames(lapply(chapters_changed, function(chapter) {
sapply(file_language, function(lang) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})
}), chapters_changed)
result
new_filenames <- chapters_changed_update[[1]]
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
diffs <- gert::git_diff()
# Filter only .qmd files
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
# 2. Create vector of target languages
deepL_lang = c("FR", "ES", "JA", "PT-PT", "TR", "RU", "VN")
target_lang = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
# Create a named list where each original chapter filename maps to its new versions with language codes
chapters_changed_new <- setNames(
lapply(chapters_changed, function(chapter) {
sapply(target_lang, function(lang) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})}),
chapters_changed)
names(chapters_changed_update)
names(chapters_changed_new)
chapters_changed_new[["index.qmd"]]
new_chapters <- chapters_changed_new[["index.qmd"]]
seq_along(new_chapters)
new_chapters[1]
deepL_lang[1]
chapters_changed_new[["new_pages/basics.qmd"]]
pacman::p_load(
gert,
stringr,
babeldown,
here
)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
diffs <- gert::git_diff()
View(diffs)
# Filter only .qmd files
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
diffs <- gert::git_diff()
# Filter only .qmd files
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
View(diffs)
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.R$")]
export(chapters_changed, here("chapters_changed_Luong.rds"))
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
export(chapters_changed, here("chapters_changed_Luong.rds"))
import(here("chapters_changed_Luong.rds"))
ls(pattern = "^csv")
ls(pattern = "^qmd")
?rio::import()
xlsx_file <- tempfile(fileext = ".xlsx")
list.files(pattern = ".RDS", full.names=T)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
diffs <- gert::git_diff()
View(diffs)
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.R$")]
export(chapters_changed, here("chapters_change" ,"chapters_changed_Luong.rds"))
export(chapters_changed, here("chapters_change" ,"chapters_changed_Neale.rds"))
list.files(path = here("chapters_changed"), pattern = ".rds", full.names=T)
list.files(path = here("chapters_changed"), pattern = ".RDS", full.names=T)
# Export the list of changed chapters to a RDS file. Add your name after the filename.
export(chapters_changed, here("chapters_changed" ,"chapters_changed_Luong.rds"))
here("chapters_changed")
list.files(path = "D:/Book Writing/epihandbook_quarto/chapters_changed", pattern = ".RDS", full.names=T)
list.files(path = here("chapters_changed"), pattern = "\.RDS", full.names=T)
list.files(path = here("chapters_changed"), pattern = "\.rds", full.names=T)
list.files(path = here("chapters_changed"), pattern = ".RDS", full.names=T)
list.files()
list.files(path = here("chapters_changed"))
export(chapters_changed, here("chapters_changed" ,"chapters_changed_Neale.rds"))
list.files(path = here("chapters_changed"))
# import all .rds files in the chapters_changed folder using import_list() function from rio package
new <- rio::import_list(here("chapters_changed"))
# import all .rds files in the chapters_changed folder using import_list() function from rio package
new <- rio::import_list(file = here("chapters_changed"))
list.files(here("chapters_changed"), full.names = TRUE)
test <- list.files(here("chapters_changed"), full.names = TRUE)
new <- lapply(test, readRDS)
View(new)
rm(test, new)
test <- list.files(here("chapters_changed"), full.names = TRUE)
new <- lapply(test, import_list)
View(new)
new <- lapply(test, import_list) %>% unlist(recursive = FALSE)
View(new)
new <- import(test)
list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
file_list <- list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
new <- import(file_list) %>% unlist()
my_data <- import_list(dir(here("chapters_changed"), pattern = ".rds"), rbind = TRUE)
ir(here("chapters_changed"), pattern = ".rds")
dir(here("chapters_changed"), pattern = ".rds")
tbl <-
list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$") %>%
map_df(~import(.))
tbl <-
list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$") %>%
map_df(~import_list(.))
data_files <- map_df(here("chapters_changed"), import)
data_files <- map_df(file_list, import)
data_files <- map_df(file_list, import_list)
data_files <- map_df(file_list, readRDS)
for (file in file_list) {
# Import the .rds file using the rio package
chapter_data <- import(file)
# Append the data to the all_chapters vector
test <- c(chapters_changed, chapter_data)
}
test
file_list <- list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
for (file in file_list) {
# Import the .rds file using the rio package
chapter_data <- import(file)
# Append the data to the all_chapters vector
chapters_changed <- c(chapters_changed, chapter_data)
}
file_list <- list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
chapters_changed <- c()
for (file in file_list) {
# Import the .rds file using the rio package
chapter_data <- import(file)
# Append the data to the all_chapters vector
chapters_changed <- c(chapters_changed, chapter_data)
}
# Remove duplicates
chapters_changed <- unique(chapters_changed)
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
yaml::read_yaml("_quarto.yml")
?quarto::quarto_render()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
rlang::last_trace()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
yaml::read_yaml("_quarto.yml")
config_contents <- yaml::read_yaml("_quarto.yml")
View(config_contents)
language_codes <- config_contents[["babelquarto"]][["languages"]]
main_language <- config_contents[["babelquarto"]][["mainlanguage"]]
temporary_directory <- withr::local_tempdir()
fs::dir_copy(here::here(), temporary_directory)
withr::with_dir(file.path(temporary_directory, fs::path_file(path)),
{
fs::file_delete(fs::dir_ls(regexp = "\\...\\.qmd"))
quarto::quarto_render(as_job = FALSE)
})
withr::with_dir(file.path(temporary_directory, fs::path_file(here::here())),
{
fs::file_delete(fs::dir_ls(regexp = "\\...\\.qmd"))
quarto::quarto_render(as_job = FALSE)
})
temporary_directory
config$lang <- language_code
# WHOLE HANDBOOK
babelquarto::render_book()
renv::activate()
renv::snapshot()
renv::snapshot()
renv::install()
renv::install()
renv::snapshot()
renv::deactivate()
