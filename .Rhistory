fill = "steelblue")           # define the color of the symbol
ggtree(
tree,
branch.length = 'none',
layout = 'circular') %<+% sample_data +               # we add the asmple data using the %<+% operator
geom_tiplab(size = 1)+                                # label tips of all branches with sample name in tree file
geom_text2(
mapping = aes(subset = !isTip, label = node),
size = 3,
color = "darkred") +                                # labels all the nodes in the tree
theme(
legend.position = "none",                            # removes the legend all together
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 12, face="bold"))
sub_tree1 <- tree_subset(
tree,
node = 528)                                            # we subset the tree at node 528
ggtree(sub_tree1) +
geom_tiplab(size = 3) +
ggtitle("Subset tree 1")
sub_tree2 <- tree_subset(
tree,
"S17BD07692",
levels_back = 9) # levels back defines how many nodes backwards from the sample tip you want to go
ggtree(sub_tree2) +
geom_tiplab(size =3)  +
ggtitle("Subset tree 2")
p <- ggtree(sub_tree2) +
geom_tiplab(size = 4) +
geom_text2(aes(subset=!isTip, label=node), # labels all the nodes in the tree
size = 5,
color = "darkred",
hjust = 1,
vjust = 1)
p
p1 <- p + geom_hilight(  # highlights node 39 in blue, "extend =" allows us to define the length of the color block
node = 39,
fill = "steelblue",
extend = 0.0017) +
geom_hilight(            # highlights the node 37 in yellow
node = 37,
fill = "yellow",
extend = 0.0017) +
ggtitle("Original tree")
p1 # print
p2 <- ggtree::rotate(p1, 37) +
ggtitle("Rotated Node 37")
p2   # print
p3 <-  flip(p1, 39, 37) +
ggtitle("Rotated Node 36")
p3   # print
ggtree(sub_tree2) %<+% sample_data +     # we use th %<+% operator to link to the sample_data
geom_tiplab(                          # labels the tips of all branches with the sample name in the tree file
size = 2.5,
offset = 0.001,
align = TRUE) +
theme_tree2()+
xlim(0, 0.015)+                       # set the x-axis limits of our tree
geom_tippoint(aes(color=Country),     # color the tip point by continent
size = 1.5)+
scale_color_brewer(
name = "Country",
palette = "Set1",
na.value = "grey")+
geom_tiplab(                          # add isolation year as a text label at the tips
aes(label = Year),
color = 'blue',
offset = 0.0045,
size = 3,
linetype = "blank" ,
geom = "text",
align = TRUE)+
geom_tiplab(                          # add travel history as a text label at the tips, in red color
aes(label = Travel_history),
color = 'red',
offset = 0.006,
size = 3,
linetype = "blank",
geom = "text",
align = TRUE)+
ggtitle("Phylogenetic tree of Belgian S. sonnei strains with travel history")+  # add plot title
xlab("genetic distance (0.001 = 4 nucleotides difference)")+                    # add a label to the x-axis
theme(
axis.title.x = element_text(size = 10),
axis.title.y = element_blank(),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(face = "bold", size = 10),
plot.title = element_text(size = 12, face = "bold"))
p <- ggtree(sub_tree2, branch.length='none', layout='circular') %<+% sample_data +
geom_tiplab(size =3) +
theme(
legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(
size = 12,
face = "bold",
hjust = 0.5,
vjust = -15))
p
gender <- data.frame("gender" = sample_data[,c("Gender")])
rownames(gender) <- sample_data$Sample_ID
cipR <- data.frame("cipR" = sample_data[,c("gyrA_mutations")])
rownames(cipR) <- sample_data$Sample_ID
MIC_Cip <- data.frame("mic_cip" = sample_data[,c("MIC_CIP")])
rownames(MIC_Cip) <- sample_data$Sample_ID
h1 <-  gheatmap(p, gender,                                 # we add a heatmap layer of the gender dataframe to our tree plot
offset = 10,                               # offset shifts the heatmap to the right,
width = 0.10,                              # width defines the width of the heatmap column,
color = NULL,                              # color defines the boarder of the heatmap columns
colnames = FALSE) +                               # hides column names for the heatmap
scale_fill_manual(name = "Gender",                       # define the coloring scheme and legend for gender
values = c("#00d1b1", "purple"),
breaks = c("Male", "Female"),
labels = c("Male", "Female")) +
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())
h1
h2 <- h1 + new_scale_fill()
h3 <- gheatmap(h2, cipR,         # adds the second row of heatmap describing Ciprofloxacin resistance mutations
offset = 12,
width = 0.10,
colnames = FALSE) +
scale_fill_manual(name = "Ciprofloxacin resistance \n conferring mutation",
values = c("#fe9698","#ea0c92"),
breaks = c( "gyrA D87Y", "gyrA S83L"),
labels = c( "gyrA d87y", "gyrA s83l")) +
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())+
guides(fill = guide_legend(nrow = 2,byrow = TRUE))
h3
# First we add the new coloring scheme:
h4 <- h3 + new_scale_fill()
# then we combine the two into a new plot:
h5 <- gheatmap(h4, MIC_Cip,
offset = 14,
width = 0.10,
colnames = FALSE)+
scale_fill_continuous(name = "MIC for Ciprofloxacin",  # here we define a gradient color scheme for the continuous variable of MIC
low = "yellow", high = "red",
breaks = c(0, 0.50, 1.00),
na.value = "white") +
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())
h5
p <- ggtree(sub_tree2) %<+% sample_data +
geom_tiplab(size = 3) + # labels the tips
theme_tree2()+
xlab("genetic distance (0.001 = 4 nucleotides difference)")+
xlim(0, 0.015)+
theme(legend.position = "none",
axis.title.y = element_blank(),
plot.title = element_text(size = 12,
face = "bold",
hjust = 0.5,
vjust = -15))
p
h1 <-  gheatmap(p, gender,
offset = 0.003,
width = 0.1,
color="black",
colnames = FALSE)+
scale_fill_manual(name = "Gender",
values = c("#00d1b1", "purple"),
breaks = c("Male", "Female"),
labels = c("Male", "Female"))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())
h1
h2 <- h1 + new_scale_fill()
h3 <- gheatmap(h2, cipR,
offset = 0.004,
width = 0.1,
color = "black",
colnames = FALSE)+
scale_fill_manual(name = "Ciprofloxacin resistance \n conferring mutation",
values = c("#fe9698","#ea0c92"),
breaks = c( "gyrA D87Y", "gyrA S83L"),
labels = c( "gyrA d87y", "gyrA s83l"))+
theme(legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.box = "vertical", legend.margin = margin())+
guides(fill = guide_legend(nrow = 2,byrow = TRUE))
h3
h4 <- h3 + new_scale_fill()
h5 <- gheatmap(h4, MIC_Cip,
offset = 0.005,
width = 0.1,
color = "black",
colnames = FALSE)+
scale_fill_continuous(name = "MIC for Ciprofloxacin",
low = "yellow", high = "red",
breaks = c(0,0.50,1.00),
na.value = "white")+
guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+
theme(legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
legend.box = "horizontal", legend.margin = margin())+
guides(shape = guide_legend(override.aes = list(size = 2)))
h5
babelquarto::render_book()
babelquarto::render_book()
pacman::p_load(
git2r,
stringr,
babeldown,
here
)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Create functions to detect changes in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
repo <- repository(here())
diffs <- diff(repo)
# Check if diffs is a list of diff objects and extract filenames accordingly
if (is.list(diffs)) {
changed_files <- sapply(diffs, function(d) d@filename)
} else {
# Handle other cases if diffs is not a list of diff objects
changed_files <- diffs@filename
}
# Filter only .qmd files
changed_chapters <- changed_files[str_detect(changed_files, "\\.qmd$")]
return(changed_chapters)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
repo <- repository(here())
repo
diffs <- diff(repo)
if (is.list(diffs)) {
changed_files <- sapply(diffs, function(d) d@filename)
} else {
# Handle other cases if diffs is not a list of diff objects
changed_files <- diffs@filename
}
View(diffs)
View(diffs)
View(diffs)
diffs
diffs$files
repo <- repository(here("new_pages"))
diffs <- diff(repo)
repo
?repository()
here("new_pages")
repo1 <- repository(path = "D:/Book Writing/epihandbook_quarto/new_pages")
repo1
repo <- repository()
repo
summary(diffs)
a <- summary(diffs)
a
summary(diffs) -> a
cat(diff(repo, as_char=TRUE))
summary(diffs)
diffs$old
diffs$files
diffs$files$ole_files
diffs$files$old_files
diffs$files$old_file
str(diffs)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Create functions to detect changes in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
repo <- repository(here())
diffs <- diff(repo)
changed_files <- sapply(diffs, function(d) d$new_file)  # Extract new_file from each diff
changed_chapters <- changed_files[str_detect(changed_files, "\\.qmd$")]
return(changed_chapters)
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Create functions to detect changes in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
repo <- repository(here())
diffs <- diff(repo)
# Print structure to understand what we're working with
print(str(diffs))
print(class(diffs))
# Assuming diffs is a list and we need to extract 'new_file' from each
changed_files <- lapply(diffs, function(d) d$new_file)  # Changed from sapply to lapply for clarity
# Unlist the result as lapply returns a list of character vectors
changed_files <- unlist(changed_files)
# Filter only .qmd files
changed_chapters <- changed_files[str_detect(changed_files, "\\.qmd$")]
return(changed_chapters)
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
print(str(diffs))
print(class(diffs))
pacman::p_load(
gert,
stringr,
babeldown,
here
)
diffs <- gert::git_diff(repo)
log <- gert::git_log(repo = repo)
log <- gert::git_log(repo = here())
log <- gert::git_log(repo = repo)
View(log)
gert::git_diff()
diffs <- gert::git_diff()
View(diffs)
diffs %>% str_detect(new, "\\.qmd$")
str_detect(diffs$new, "\\.qmd$")
diffs <- gert::git_diff()
# Filter only .qmd files
changed_chapters <-  str_detect(diffs$new, "\\.qmd$")
changed_chapters
View(diffs)
diffs %>%
filter(str_detect(new, ".qmd$")) %>%
pull(file)
diffs %>%
filter(str_detect(new, ".qmd$"))
diffs %>%
filter(str_detect(new, "\\.qmd$"))
diffs %>%
filter(str_detect(diffs$new, "\\.qmd$"))
View(diffs)
str_detect(diffs$new, "\\.qmd$")
diffs$new
View(diffs)
diffs %>%
filter(str_detect(diffs$new, "\\.qmd$")) %>%
pull(file)
diffs %>%
filter(str_detect(diffs$new, "\\.qmd$"))
diffs %>%
filter(str_detect(string = new, pattern = "\\.qmd$"))
diffs %>%
filter(str_detect(string = status, pattern = "\\.qmd$"))
class(diffs)
diffs %>%
filter(str_detect(string = new, pattern = "\\.qmd$"))
diffs %>%
filter(str_detect(string = status, pattern = ".qmd"))
str_detect(diffs$new, "\\.qmd$")
diffs %>%
filter(stringr::str_detect(string = status, pattern = "\\.qmd$"))
diffs$new[str_detect(diffs$new, "\\.qmd$")]
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")
]
changed_files
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
target_lang = c("FR", "ES", "JA", "PT-PT", "TR", "RU", "VN")
chapters_changed_update <- generate_translation_files(chapters_changed, target_lang)
chapters_changed_update
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
chapters_changed
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
# Generate translation file names
generate_translation_files <- function(chapters, languages) {
sapply(chapters, function(chapter) {
chapter_base <- str_sub(chapter, 1, str_length(chapter) - 4) # Remove ".qmd" extension
paste0(chapter_base, ".", tolower(languages), ".qmd")
})
}
# 2. Create vector of target languages
chapters_changed <- get_changed_chapters()
chapters_changed
chapters_changed <- get_changed_chapters()
target_lang = c("FR", "ES", "JA", "PT-PT", "TR", "RU", "VN")
chapters_changed_update <- generate_translation_files(chapters_changed, target_lang)
chapters_changed_update
result <- list()
# Loop over each language and append it to each chapter file name
for (lang in file_language) {
# Append the language suffix before the ".qmd" extension
modified_chapters <- sapply(chapters_changed, function(chapter) {
sub("\\.qmd$", paste0("_", lang, ".qmd"), chapter)
})
# Add the modified chapters to the result list
result[[lang]] <- modified_chapters
}
file_language = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
result <- list()
# Loop over each language and append it to each chapter file name
for (lang in file_language) {
# Append the language suffix before the ".qmd" extension
modified_chapters <- sapply(chapters_changed, function(chapter) {
sub("\\.qmd$", paste0("_", lang, ".qmd"), chapter)
})
# Add the modified chapters to the result list
result[[lang]] <- modified_chapters
}
result
# Flatten the list into a single vector
chapters_changed_update <- unlist(result)
chapters_changed_update
class(chapters_changed_update)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
chapters_changed <- get_changed_chapters()
file_language = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
all_chapters_with_language <- lapply(file_language, function(lang) {
sapply(chapters_changed, function(chapter) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})
})
View(all_chapters_with_language)
# Unlist to convert the list of vectors into a single vector
final_vector <- unlist(all_chapters_with_language)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
# Function to detect changed chapters
get_changed_chapters <- function() {
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
return(changed_files)
}
chapters_changed <- get_changed_chapters()
file_language = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
result <- setNames(lapply(chapters_changed, function(chapter) {
sapply(file_language, function(lang) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})
}), chapters_changed)
result
new_filenames <- chapters_changed_update[[1]]
diffs <- gert::git_diff()
# Filter only .qmd files
changed_files <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
diffs <- gert::git_diff()
# Filter only .qmd files
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.qmd$")]
# 2. Create vector of target languages
deepL_lang = c("FR", "ES", "JA", "PT-PT", "TR", "RU", "VN")
target_lang = c("fr", "es", "jp", "pt", "tr", "ru", "vn")
# Create a named list where each original chapter filename maps to its new versions with language codes
chapters_changed_new <- setNames(
lapply(chapters_changed, function(chapter) {
sapply(target_lang, function(lang) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})}),
chapters_changed)
names(chapters_changed_update)
names(chapters_changed_new)
chapters_changed_new[["index.qmd"]]
new_chapters <- chapters_changed_new[["index.qmd"]]
seq_along(new_chapters)
new_chapters[1]
deepL_lang[1]
chapters_changed_new[["new_pages/basics.qmd"]]
